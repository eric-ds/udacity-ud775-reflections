6. How did viewing a diff between two versions help you spot the bug?

I used FC (File Compare)
 - I didn't have to sort through hundreds of lines of code
 - I was shown only the areas that differed between the files
 - I was shown which file had which values, and they were next to each other, making it easy to see the differences

8. How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

You could see what did and didn't work, and you could track changes and link them to certain program behavior.

15. What do you think are the pros and cons of manually choosing when to create a commit, like you do it Git, vs having versions automatically saved, like Google Docs does?
 - Pros:
	+ More meaningful versions
	+ Less versions to comb through
 - Cons:
	+ Inconsistent commits
	+ Each commit is dependent on an individual choice, which is likely to vary from commit to commit

18. Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

This is to track changes to a 'project' that affect multiple files, and to make sure those changes are properly associated.

22. How can you use the commands git log and git diff to view the history of files?

Git log will show you a history of commits, and the messages, which should describe the changes associated to those commits.  git diff will allow you to compare any two commits, and shows the line insertions/deletions between the two versions.

26. How might using version control make you more confident to make changes that could break something?

It allows you to find where a bug is introduced, and if you commits are logical, identify what code introduces it.

31. Now that you have your workspace set up, what do you want to try using Git for?

Version control of my code bot!  Maybe everything?
